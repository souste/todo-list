(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>p});var r=n(537),o=n.n(r),i=n(645),a=n.n(i),l=n(667),c=n.n(l),s=new URL(n(225),n.b),u=a()(o()),d=c()(s);u.push([t.id,`@font-face {\n  font-family: "Rajdhani";\n  src: url(${d}) format("truetype");\n  font-weight: normal;\n  font-style: normal;\n}\n\n* {\n  font-family: "Rajdhani", sans-serif;\n}\n\n#content {\n  display: flex;\n  justify-content: center;\n}\n\n/* MENU BAR */\n\n.menu-container {\n  width: 15vw;\n  background-color: pink;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  padding-left: 20px;\n}\n\n.top-menu-title {\n  font-size: 50px;\n}\n\n.menu-title {\n  font-weight: bold;\n  font-size: 30px;\n}\n\n#menu-home {\n  cursor: pointer;\n  color: white;\n}\n\n#menu-home:hover {\n  color: black;\n}\n\n.title-button-container {\n  display: flex;\n  align-items: center;\n}\n\n.project-name {\n  cursor: pointer;\n  color: purple;\n}\n\n.new-list-button,\n.new-project-button {\n  font-size: 70px;\n  border: none;\n  background-color: pink;\n  margin-left: 100px;\n  cursor: pointer;\n  font-weight: bold;\n  width: 3rem;\n  height: 2.7rem;\n  color: white;\n}\n\n.new-project-button {\n  font-size: 35px;\n  margin-left: 0;\n}\n\n.new-list-button:hover,\n.new-project-button:hover {\n  color: black;\n}\n\n/* FORM CONTAINER */\n\n.form-container,\n.project-form-container,\n.project-todo-form-container,\n.edit-form {\n  border: 1px solid black;\n  background-color: rgb(228, 221, 221);\n  display: flex;\n  flex-direction: column;\n  width: 30vw;\n  height: 50vh;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 2;\n  justify-content: center;\n  align-items: center;\n}\n\n.project-form-container {\n  height: 20vh;\n  padding: 10px;\n  display: flex;\n}\n\n.form-header {\n  font-weight: bold;\n  font-size: 30px;\n  text-align: center;\n}\n\n.label-input-container {\n  display: flex;\n  flex-direction: column;\n}\n\nlabel {\n  font-size: 20px;\n  font-weight: bold;\n}\n\ninput {\n  background-color: #ffffff;\n  width: 300px;\n  padding: 7px;\n  border-radius: 3px;\n  font-size: 14px;\n  border-color: #e5e7eb;\n}\n\n#priority option[value="Low"] {\n  color: blue;\n}\n\n#priority option[value="Medium"] {\n  color: green;\n}\n\n#priority option[value="High"] {\n  color: red;\n}\n\n.form-button-container {\n  display: flex;\n  justify-content: center;\n  gap: 5px;\n  margin-top: 10px;\n}\n\n/* EDIT FORM */\n\n.edit-form {\n  height: 30vh;\n  padding: 10px;\n}\n\n#edit-priority {\n  width: 310px;\n  margin-top: 10px;\n}\n\n.edit-form input {\n  margin-top: 10px;\n}\n\n/* // LIST CONTAINER */\n\n.lists-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n  width: 85vw;\n  cursor: pointer;\n  padding-top: 200px;\n  min-height: 400px;\n}\n\n.list-container {\n  background-color: rgb(228, 221, 221);\n  margin: 20px;\n  width: 50vw;\n  text-align: center;\n  display: flex;\n  padding-left: 20px;\n  gap: 20px;\n  align-items: center;\n  justify-content: space-between;\n  padding-left: 20px;\n  padding-right: 20px;\n  gap: 20px;\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n  border-left: 15px solid pink;\n}\n\n.list-title {\n  font-weight: bold;\n  font-size: 30px;\n  margin-right: auto;\n}\n\n.open-list-title {\n  font-weight: bold;\n  font-size: 30px;\n}\n\n.list-due-date {\n  font-size: 20px;\n}\n\n.list-priority {\n  color: black;\n}\n\n.list-priority.low {\n  color: blue;\n  font-size: 20px;\n  font-weight: bold;\n}\n\n.list-priority.medium {\n  color: green;\n  font-size: 20px;\n  font-weight: bold;\n}\n\n.list-priority.high {\n  color: red;\n  font-size: 20px;\n  font-weight: bold;\n}\n\n/* // OPEN LIST CONTAINER */\n\n.open-list-container {\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n  background-color: rgb(228, 221, 221);\n  width: 40vw;\n  height: 60vh;\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 2;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.open-list-title {\n  font-size: 40px;\n  background-color: pink;\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n}\n\n.open-list-description {\n  font-size: 30px;\n  padding: 20px;\n  color: rgb(50, 50, 50);\n}\n\n.open-list-due-date {\n  font-size: 30px;\n  color: rgb(50, 50, 50);\n}\n\n#open-list-priority {\n  font-size: 30px;\n}\n\n.buttons-container {\n  margin-top: 10px;\n  display: flex;\n  gap: 10px;\n}\n\nimg {\n  width: 30px;\n  height: auto;\n  cursor: pointer;\n}\n\n/* // PROJECT LIST CONTAINER */\n\n.project-header {\n  margin-bottom: 10px;\n  text-align: center;\n  font-size: 50px;\n}\n\n.project-list-button {\n  font-size: 70px;\n  border: none;\n  color: pink;\n  cursor: pointer;\n  font-weight: bold;\n  width: 3rem;\n  height: 2.7rem;\n  margin-left: 100px;\n}\n\n.project-list-button:hover {\n  color: black;\n}\n\n.header-button-container {\n  position: absolute;\n  top: 10px;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  z-index: 2;\n}\n\n.project-list-button {\n  margin-top: 10px;\n}\n\n.project-name {\n  color: white;\n  font-size: 25px;\n  font-weight: bold;\n}\n\n.project-name:hover {\n  color: black;\n}\n\n/* EDIT FORM */\n\n.edit-form {\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n}\n\n/* BUTTON IMAGES */\n\n/* .add-list-button,\n.add-project-button,\n.add-project-list-button {\n  background-image: url("tick-mark.png");\n  width: 30px;\n  height: auto;\n  cursor: pointer;\n}\n\n.close-list-button,\n.close-project-button,\n.close-project-list-button {\n  background-image: url("close.png");\n  background-repeat: no-repeat;\n  width: 30px;\n  height: auto;\n  cursor: pointer;\n} */\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,uBAAuB;EACvB,+DAAqD;EACrD,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,aAAa;EACb,uBAAuB;AACzB;;AAEA,aAAa;;AAEb;EACE,WAAW;EACX,sBAAsB;EACtB,aAAa;EACb,sBAAsB;EACtB,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,aAAa;AACf;;AAEA;;EAEE,eAAe;EACf,YAAY;EACZ,sBAAsB;EACtB,kBAAkB;EAClB,eAAe;EACf,iBAAiB;EACjB,WAAW;EACX,cAAc;EACd,YAAY;AACd;;AAEA;EACE,eAAe;EACf,cAAc;AAChB;;AAEA;;EAEE,YAAY;AACd;;AAEA,mBAAmB;;AAEnB;;;;EAIE,uBAAuB;EACvB,oCAAoC;EACpC,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,YAAY;EACZ,eAAe;EACf,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,UAAU;EACV,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,aAAa;AACf;;AAEA;EACE,iBAAiB;EACjB,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf,qBAAqB;AACvB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,QAAQ;EACR,gBAAgB;AAClB;;AAEA,cAAc;;AAEd;EACE,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,YAAY;EACZ,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA,sBAAsB;;AAEtB;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,2BAA2B;EAC3B,WAAW;EACX,eAAe;EACf,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,oCAAoC;EACpC,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,aAAa;EACb,kBAAkB;EAClB,SAAS;EACT,mBAAmB;EACnB,8BAA8B;EAC9B,kBAAkB;EAClB,mBAAmB;EACnB,SAAS;EACT,2CAA2C;EAC3C,4BAA4B;AAC9B;;AAEA;EACE,iBAAiB;EACjB,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;EACX,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,UAAU;EACV,eAAe;EACf,iBAAiB;AACnB;;AAEA,2BAA2B;;AAE3B;EACE,2CAA2C;EAC3C,oCAAoC;EACpC,WAAW;EACX,YAAY;EACZ,eAAe;EACf,QAAQ;EACR,SAAS;EACT,gCAAgC;EAChC,UAAU;EACV,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,sBAAsB;EACtB,2CAA2C;AAC7C;;AAEA;EACE,eAAe;EACf,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,eAAe;EACf,sBAAsB;AACxB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,SAAS;AACX;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;;AAEA,8BAA8B;;AAE9B;EACE,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,YAAY;EACZ,WAAW;EACX,eAAe;EACf,iBAAiB;EACjB,WAAW;EACX,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,SAAS;EACT,2BAA2B;EAC3B,kBAAkB;EAClB,UAAU;AACZ;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,YAAY;AACd;;AAEA,cAAc;;AAEd;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA,kBAAkB;;AAElB;;;;;;;;;;;;;;;;;GAiBG",sourcesContent:['@font-face {\r\n  font-family: "Rajdhani";\r\n  src: url("./Rajdhani-Regular.ttf") format("truetype");\r\n  font-weight: normal;\r\n  font-style: normal;\r\n}\r\n\r\n* {\r\n  font-family: "Rajdhani", sans-serif;\r\n}\r\n\r\n#content {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n/* MENU BAR */\r\n\r\n.menu-container {\r\n  width: 15vw;\r\n  background-color: pink;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  padding-left: 20px;\r\n}\r\n\r\n.top-menu-title {\r\n  font-size: 50px;\r\n}\r\n\r\n.menu-title {\r\n  font-weight: bold;\r\n  font-size: 30px;\r\n}\r\n\r\n#menu-home {\r\n  cursor: pointer;\r\n  color: white;\r\n}\r\n\r\n#menu-home:hover {\r\n  color: black;\r\n}\r\n\r\n.title-button-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.project-name {\r\n  cursor: pointer;\r\n  color: purple;\r\n}\r\n\r\n.new-list-button,\r\n.new-project-button {\r\n  font-size: 70px;\r\n  border: none;\r\n  background-color: pink;\r\n  margin-left: 100px;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  width: 3rem;\r\n  height: 2.7rem;\r\n  color: white;\r\n}\r\n\r\n.new-project-button {\r\n  font-size: 35px;\r\n  margin-left: 0;\r\n}\r\n\r\n.new-list-button:hover,\r\n.new-project-button:hover {\r\n  color: black;\r\n}\r\n\r\n/* FORM CONTAINER */\r\n\r\n.form-container,\r\n.project-form-container,\r\n.project-todo-form-container,\r\n.edit-form {\r\n  border: 1px solid black;\r\n  background-color: rgb(228, 221, 221);\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 30vw;\r\n  height: 50vh;\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  z-index: 2;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.project-form-container {\r\n  height: 20vh;\r\n  padding: 10px;\r\n  display: flex;\r\n}\r\n\r\n.form-header {\r\n  font-weight: bold;\r\n  font-size: 30px;\r\n  text-align: center;\r\n}\r\n\r\n.label-input-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\nlabel {\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n}\r\n\r\ninput {\r\n  background-color: #ffffff;\r\n  width: 300px;\r\n  padding: 7px;\r\n  border-radius: 3px;\r\n  font-size: 14px;\r\n  border-color: #e5e7eb;\r\n}\r\n\r\n#priority option[value="Low"] {\r\n  color: blue;\r\n}\r\n\r\n#priority option[value="Medium"] {\r\n  color: green;\r\n}\r\n\r\n#priority option[value="High"] {\r\n  color: red;\r\n}\r\n\r\n.form-button-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 5px;\r\n  margin-top: 10px;\r\n}\r\n\r\n/* EDIT FORM */\r\n\r\n.edit-form {\r\n  height: 30vh;\r\n  padding: 10px;\r\n}\r\n\r\n#edit-priority {\r\n  width: 310px;\r\n  margin-top: 10px;\r\n}\r\n\r\n.edit-form input {\r\n  margin-top: 10px;\r\n}\r\n\r\n/* // LIST CONTAINER */\r\n\r\n.lists-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  width: 85vw;\r\n  cursor: pointer;\r\n  padding-top: 200px;\r\n  min-height: 400px;\r\n}\r\n\r\n.list-container {\r\n  background-color: rgb(228, 221, 221);\r\n  margin: 20px;\r\n  width: 50vw;\r\n  text-align: center;\r\n  display: flex;\r\n  padding-left: 20px;\r\n  gap: 20px;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n  gap: 20px;\r\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\r\n  border-left: 15px solid pink;\r\n}\r\n\r\n.list-title {\r\n  font-weight: bold;\r\n  font-size: 30px;\r\n  margin-right: auto;\r\n}\r\n\r\n.open-list-title {\r\n  font-weight: bold;\r\n  font-size: 30px;\r\n}\r\n\r\n.list-due-date {\r\n  font-size: 20px;\r\n}\r\n\r\n.list-priority {\r\n  color: black;\r\n}\r\n\r\n.list-priority.low {\r\n  color: blue;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n}\r\n\r\n.list-priority.medium {\r\n  color: green;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n}\r\n\r\n.list-priority.high {\r\n  color: red;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n}\r\n\r\n/* // OPEN LIST CONTAINER */\r\n\r\n.open-list-container {\r\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\r\n  background-color: rgb(228, 221, 221);\r\n  width: 40vw;\r\n  height: 60vh;\r\n  position: fixed;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  z-index: 2;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.open-list-title {\r\n  font-size: 40px;\r\n  background-color: pink;\r\n  box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\r\n}\r\n\r\n.open-list-description {\r\n  font-size: 30px;\r\n  padding: 20px;\r\n  color: rgb(50, 50, 50);\r\n}\r\n\r\n.open-list-due-date {\r\n  font-size: 30px;\r\n  color: rgb(50, 50, 50);\r\n}\r\n\r\n#open-list-priority {\r\n  font-size: 30px;\r\n}\r\n\r\n.buttons-container {\r\n  margin-top: 10px;\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\nimg {\r\n  width: 30px;\r\n  height: auto;\r\n  cursor: pointer;\r\n}\r\n\r\n/* // PROJECT LIST CONTAINER */\r\n\r\n.project-header {\r\n  margin-bottom: 10px;\r\n  text-align: center;\r\n  font-size: 50px;\r\n}\r\n\r\n.project-list-button {\r\n  font-size: 70px;\r\n  border: none;\r\n  color: pink;\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  width: 3rem;\r\n  height: 2.7rem;\r\n  margin-left: 100px;\r\n}\r\n\r\n.project-list-button:hover {\r\n  color: black;\r\n}\r\n\r\n.header-button-container {\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  text-align: center;\r\n  z-index: 2;\r\n}\r\n\r\n.project-list-button {\r\n  margin-top: 10px;\r\n}\r\n\r\n.project-name {\r\n  color: white;\r\n  font-size: 25px;\r\n  font-weight: bold;\r\n}\r\n\r\n.project-name:hover {\r\n  color: black;\r\n}\r\n\r\n/* EDIT FORM */\r\n\r\n.edit-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: absolute;\r\n}\r\n\r\n/* BUTTON IMAGES */\r\n\r\n/* .add-list-button,\r\n.add-project-button,\r\n.add-project-list-button {\r\n  background-image: url("tick-mark.png");\r\n  width: 30px;\r\n  height: auto;\r\n  cursor: pointer;\r\n}\r\n\r\n.close-list-button,\r\n.close-project-button,\r\n.close-project-list-button {\r\n  background-image: url("close.png");\r\n  background-repeat: no-repeat;\r\n  width: 30px;\r\n  height: auto;\r\n  cursor: pointer;\r\n} */\r\n'],sourceRoot:""}]);const p=u},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(a[c]=!0)}for(var s=0;s<t.length;s++){var u=[].concat(t[s]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},667:t=>{t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},a=[],l=0;l<t.length;l++){var c=t[l],s=r.base?c[0]+r.base:c[0],u=i[s]||0,d="".concat(s," ").concat(u);i[s]=u+1;var p=n(d),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(f);else{var h=o(f,r);r.byIndex=l,e.splice(l,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var l=n(i[a]);e[l].references--}for(var c=r(t,o),s=0;s<i.length;s++){var u=n(i[s]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},225:(t,e,n)=>{t.exports=n.p+"148606c1eb703f6e597a.ttf"}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!t;)t=r[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),o=n.n(r),i=n(569),a=n.n(i),l=n(565),c=n.n(l),s=n(216),u=n.n(s),d=n(589),p=n.n(d),f=n(426),h={};function A(t){return A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},A(t)}function m(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function v(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return m(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?m(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,l=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return a=t.done,t},e:function(t){l=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}h.styleTagTransform=p(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=u(),e()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals;var y={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function g(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const w={date:g({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:g({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:g({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var b={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function E(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,i=null!=n&&n.width?String(n.width):o;r=t.formattingValues[i]||t.formattingValues[o]}else{var a=t.defaultWidth,l=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[l]||t.values[a]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const C={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:E({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:E({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:E({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:E({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:E({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function x(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],i=e.match(o);if(!i)return null;var a,l=i[0],c=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],s=Array.isArray(c)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(l))return n}(c):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(l))return n}(c);return a=t.valueCallback?t.valueCallback(s):s,{value:a=n.valueCallback?n.valueCallback(a):a,rest:e.slice(l.length)}}}var k,T={ordinalNumber:(k={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(k.matchPattern);if(!n)return null;var r=n[0],o=t.match(k.parsePattern);if(!o)return null;var i=k.valueCallback?k.valueCallback(o[0]):o[0];return{value:i=e.valueCallback?e.valueCallback(i):i,rest:t.slice(r.length)}}),era:x({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:x({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:x({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:x({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:x({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const B={code:"en-US",formatDistance:function(t,e,n){var r,o=y[t];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:w,formatRelative:function(t,e,n,r){return b[t]},localize:C,match:T,options:{weekStartsOn:0,firstWeekContainsDate:1}};function D(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function j(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function S(t){j(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===A(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function M(t,e){if(null==t)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}var L=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Y=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const U={p:Y,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],o=r[1],i=r[2];if(!i)return L(t,e);switch(o){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",L(o,e)).replace("{{time}}",Y(i,e))}};var P=["D","DD"],N=["YY","YYYY"];function I(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}function O(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function W(t,e){return W=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},W(t,e)}function q(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&W(t,e)}function R(t){return R=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},R(t)}function H(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=R(t);if(e){var o=R(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return function(t,e){if(e&&("object"===A(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return O(t)}(this,n)}}function z(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function F(t){var e=function(t,e){if("object"!==A(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==A(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===A(e)?e:String(e)}function Q(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,F(r.key),r)}}function X(t,e,n){return e&&Q(t.prototype,e),n&&Q(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function Z(t,e,n){return(e=F(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var J=function(){function t(){z(this,t),Z(this,"priority",void 0),Z(this,"subPriority",0)}return X(t,[{key:"validate",value:function(t,e){return!0}}]),t}(),G=function(t){q(n,t);var e=H(n);function n(t,r,o,i,a){var l;return z(this,n),(l=e.call(this)).value=t,l.validateValue=r,l.setValue=o,l.priority=i,a&&(l.subPriority=a),l}return X(n,[{key:"validate",value:function(t,e){return this.validateValue(t,this.value,e)}},{key:"set",value:function(t,e,n){return this.setValue(t,e,this.value,n)}}]),n}(J),$=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",10),Z(O(t),"subPriority",-1),t}return X(n,[{key:"set",value:function(t,e){if(e.timestampIsSet)return t;var n=new Date(0);return n.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),n.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),n}}]),n}(J),_=function(){function t(){z(this,t),Z(this,"incompatibleTokens",void 0),Z(this,"priority",void 0),Z(this,"subPriority",void 0)}return X(t,[{key:"run",value:function(t,e,n,r){var o=this.parse(t,e,n,r);return o?{setter:new G(o.value,this.validate,this.set,this.priority,this.subPriority),rest:o.rest}:null}},{key:"validate",value:function(t,e,n){return!0}}]),t}(),V=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",140),Z(O(t),"incompatibleTokens",["R","u","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"G":case"GG":case"GGG":return n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"});case"GGGGG":return n.era(t,{width:"narrow"});default:return n.era(t,{width:"wide"})||n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"})}}},{key:"set",value:function(t,e,n){return e.era=n,t.setUTCFullYear(n,0,1),t.setUTCHours(0,0,0,0),t}}]),n}(_),K=(Math.pow(10,8),/^(1[0-2]|0?\d)/),tt=/^(3[0-1]|[0-2]?\d)/,et=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,nt=/^(5[0-3]|[0-4]?\d)/,rt=/^(2[0-3]|[0-1]?\d)/,ot=/^(2[0-4]|[0-1]?\d)/,it=/^(1[0-1]|0?\d)/,at=/^(1[0-2]|0?\d)/,lt=/^[0-5]?\d/,ct=/^[0-5]?\d/,st=/^\d/,ut=/^\d{1,2}/,dt=/^\d{1,3}/,pt=/^\d{1,4}/,ft=/^-?\d+/,ht=/^-?\d/,At=/^-?\d{1,2}/,mt=/^-?\d{1,3}/,vt=/^-?\d{1,4}/,yt=/^([+-])(\d{2})(\d{2})?|Z/,gt=/^([+-])(\d{2})(\d{2})|Z/,wt=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,bt=/^([+-])(\d{2}):(\d{2})|Z/,Et=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function Ct(t,e){return t?{value:e(t.value),rest:t.rest}:t}function xt(t,e){var n=e.match(t);return n?{value:parseInt(n[0],10),rest:e.slice(n[0].length)}:null}function kt(t,e){var n=e.match(t);return n?"Z"===n[0]?{value:0,rest:e.slice(1)}:{value:("+"===n[1]?1:-1)*(36e5*(n[2]?parseInt(n[2],10):0)+6e4*(n[3]?parseInt(n[3],10):0)+1e3*(n[5]?parseInt(n[5],10):0)),rest:e.slice(n[0].length)}:null}function Tt(t){return xt(ft,t)}function Bt(t,e){switch(t){case 1:return xt(st,e);case 2:return xt(ut,e);case 3:return xt(dt,e);case 4:return xt(pt,e);default:return xt(new RegExp("^\\d{1,"+t+"}"),e)}}function Dt(t,e){switch(t){case 1:return xt(ht,e);case 2:return xt(At,e);case 3:return xt(mt,e);case 4:return xt(vt,e);default:return xt(new RegExp("^-?\\d{1,"+t+"}"),e)}}function jt(t){switch(t){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function St(t,e){var n,r=e>0,o=r?e:1-e;if(o<=50)n=t||100;else{var i=o+50;n=t+100*Math.floor(i/100)-(t>=i%100?100:0)}return r?n:1-n}function Mt(t){return t%400==0||t%4==0&&t%100!=0}var Lt=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",130),Z(O(t),"incompatibleTokens",["Y","R","u","w","I","i","e","c","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){var r=function(t){return{year:t,isTwoDigitYear:"yy"===e}};switch(e){case"y":return Ct(Bt(4,t),r);case"yo":return Ct(n.ordinalNumber(t,{unit:"year"}),r);default:return Ct(Bt(e.length,t),r)}}},{key:"validate",value:function(t,e){return e.isTwoDigitYear||e.year>0}},{key:"set",value:function(t,e,n){var r=t.getUTCFullYear();if(n.isTwoDigitYear){var o=St(n.year,r);return t.setUTCFullYear(o,0,1),t.setUTCHours(0,0,0,0),t}var i="era"in e&&1!==e.era?1-n.year:n.year;return t.setUTCFullYear(i,0,1),t.setUTCHours(0,0,0,0),t}}]),n}(_),Yt={};function Ut(){return Yt}function Pt(t,e){var n,r,o,i,a,l,c,s;j(1,arguments);var u=Ut(),d=D(null!==(n=null!==(r=null!==(o=null!==(i=null==e?void 0:e.weekStartsOn)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(l=a.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==o?o:u.weekStartsOn)&&void 0!==r?r:null===(c=u.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==n?n:0);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=S(t),f=p.getUTCDay(),h=(f<d?7:0)+f-d;return p.setUTCDate(p.getUTCDate()-h),p.setUTCHours(0,0,0,0),p}function Nt(t,e){var n,r,o,i,a,l,c,s;j(1,arguments);var u=S(t),d=u.getUTCFullYear(),p=Ut(),f=D(null!==(n=null!==(r=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(l=a.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==o?o:p.firstWeekContainsDate)&&void 0!==r?r:null===(c=p.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==n?n:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(d+1,0,f),h.setUTCHours(0,0,0,0);var A=Pt(h,e),m=new Date(0);m.setUTCFullYear(d,0,f),m.setUTCHours(0,0,0,0);var v=Pt(m,e);return u.getTime()>=A.getTime()?d+1:u.getTime()>=v.getTime()?d:d-1}var It=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",130),Z(O(t),"incompatibleTokens",["y","R","u","Q","q","M","L","I","d","D","i","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){var r=function(t){return{year:t,isTwoDigitYear:"YY"===e}};switch(e){case"Y":return Ct(Bt(4,t),r);case"Yo":return Ct(n.ordinalNumber(t,{unit:"year"}),r);default:return Ct(Bt(e.length,t),r)}}},{key:"validate",value:function(t,e){return e.isTwoDigitYear||e.year>0}},{key:"set",value:function(t,e,n,r){var o=Nt(t,r);if(n.isTwoDigitYear){var i=St(n.year,o);return t.setUTCFullYear(i,0,r.firstWeekContainsDate),t.setUTCHours(0,0,0,0),Pt(t,r)}var a="era"in e&&1!==e.era?1-n.year:n.year;return t.setUTCFullYear(a,0,r.firstWeekContainsDate),t.setUTCHours(0,0,0,0),Pt(t,r)}}]),n}(_);function Ot(t){j(1,arguments);var e=S(t),n=e.getUTCDay(),r=(n<1?7:0)+n-1;return e.setUTCDate(e.getUTCDate()-r),e.setUTCHours(0,0,0,0),e}var Wt=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",130),Z(O(t),"incompatibleTokens",["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]),t}return X(n,[{key:"parse",value:function(t,e){return Dt("R"===e?4:e.length,t)}},{key:"set",value:function(t,e,n){var r=new Date(0);return r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0),Ot(r)}}]),n}(_),qt=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",130),Z(O(t),"incompatibleTokens",["G","y","Y","R","w","I","i","e","c","t","T"]),t}return X(n,[{key:"parse",value:function(t,e){return Dt("u"===e?4:e.length,t)}},{key:"set",value:function(t,e,n){return t.setUTCFullYear(n,0,1),t.setUTCHours(0,0,0,0),t}}]),n}(_),Rt=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",120),Z(O(t),"incompatibleTokens",["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"Q":case"QQ":return Bt(e.length,t);case"Qo":return n.ordinalNumber(t,{unit:"quarter"});case"QQQ":return n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(t,{width:"narrow",context:"formatting"});default:return n.quarter(t,{width:"wide",context:"formatting"})||n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=1&&e<=4}},{key:"set",value:function(t,e,n){return t.setUTCMonth(3*(n-1),1),t.setUTCHours(0,0,0,0),t}}]),n}(_),Ht=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",120),Z(O(t),"incompatibleTokens",["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"q":case"qq":return Bt(e.length,t);case"qo":return n.ordinalNumber(t,{unit:"quarter"});case"qqq":return n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(t,{width:"narrow",context:"standalone"});default:return n.quarter(t,{width:"wide",context:"standalone"})||n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(t,e){return e>=1&&e<=4}},{key:"set",value:function(t,e,n){return t.setUTCMonth(3*(n-1),1),t.setUTCHours(0,0,0,0),t}}]),n}(_),zt=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"incompatibleTokens",["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]),Z(O(t),"priority",110),t}return X(n,[{key:"parse",value:function(t,e,n){var r=function(t){return t-1};switch(e){case"M":return Ct(xt(K,t),r);case"MM":return Ct(Bt(2,t),r);case"Mo":return Ct(n.ordinalNumber(t,{unit:"month"}),r);case"MMM":return n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(t,{width:"narrow",context:"formatting"});default:return n.month(t,{width:"wide",context:"formatting"})||n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=11}},{key:"set",value:function(t,e,n){return t.setUTCMonth(n,1),t.setUTCHours(0,0,0,0),t}}]),n}(_),Ft=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",110),Z(O(t),"incompatibleTokens",["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){var r=function(t){return t-1};switch(e){case"L":return Ct(xt(K,t),r);case"LL":return Ct(Bt(2,t),r);case"Lo":return Ct(n.ordinalNumber(t,{unit:"month"}),r);case"LLL":return n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(t,{width:"narrow",context:"standalone"});default:return n.month(t,{width:"wide",context:"standalone"})||n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=11}},{key:"set",value:function(t,e,n){return t.setUTCMonth(n,1),t.setUTCHours(0,0,0,0),t}}]),n}(_);var Qt=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",100),Z(O(t),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","i","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"w":return xt(nt,t);case"wo":return n.ordinalNumber(t,{unit:"week"});default:return Bt(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=53}},{key:"set",value:function(t,e,n,r){return Pt(function(t,e,n){j(2,arguments);var r=S(t),o=D(e),i=function(t,e){j(1,arguments);var n=S(t),r=Pt(n,e).getTime()-function(t,e){var n,r,o,i,a,l,c,s;j(1,arguments);var u=Ut(),d=D(null!==(n=null!==(r=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(l=a.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==o?o:u.firstWeekContainsDate)&&void 0!==r?r:null===(c=u.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==n?n:1),p=Nt(t,e),f=new Date(0);return f.setUTCFullYear(p,0,d),f.setUTCHours(0,0,0,0),Pt(f,e)}(n,e).getTime();return Math.round(r/6048e5)+1}(r,n)-o;return r.setUTCDate(r.getUTCDate()-7*i),r}(t,n,r),r)}}]),n}(_);function Xt(t,e){j(2,arguments);var n=S(t),r=D(e),o=function(t){j(1,arguments);var e=S(t),n=Ot(e).getTime()-function(t){j(1,arguments);var e=function(t){j(1,arguments);var e=S(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var o=Ot(r),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var a=Ot(i);return e.getTime()>=o.getTime()?n+1:e.getTime()>=a.getTime()?n:n-1}(t),n=new Date(0);return n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0),Ot(n)}(e).getTime();return Math.round(n/6048e5)+1}(n)-r;return n.setUTCDate(n.getUTCDate()-7*o),n}var Zt=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",100),Z(O(t),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"I":return xt(nt,t);case"Io":return n.ordinalNumber(t,{unit:"week"});default:return Bt(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=53}},{key:"set",value:function(t,e,n){return Ot(Xt(t,n))}}]),n}(_),Jt=[31,28,31,30,31,30,31,31,30,31,30,31],Gt=[31,29,31,30,31,30,31,31,30,31,30,31],$t=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",90),Z(O(t),"subPriority",1),Z(O(t),"incompatibleTokens",["Y","R","q","Q","w","I","D","i","e","c","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"d":return xt(tt,t);case"do":return n.ordinalNumber(t,{unit:"date"});default:return Bt(e.length,t)}}},{key:"validate",value:function(t,e){var n=Mt(t.getUTCFullYear()),r=t.getUTCMonth();return n?e>=1&&e<=Gt[r]:e>=1&&e<=Jt[r]}},{key:"set",value:function(t,e,n){return t.setUTCDate(n),t.setUTCHours(0,0,0,0),t}}]),n}(_),_t=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",90),Z(O(t),"subpriority",1),Z(O(t),"incompatibleTokens",["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"D":case"DD":return xt(et,t);case"Do":return n.ordinalNumber(t,{unit:"date"});default:return Bt(e.length,t)}}},{key:"validate",value:function(t,e){return Mt(t.getUTCFullYear())?e>=1&&e<=366:e>=1&&e<=365}},{key:"set",value:function(t,e,n){return t.setUTCMonth(0,n),t.setUTCHours(0,0,0,0),t}}]),n}(_);function Vt(t,e,n){var r,o,i,a,l,c,s,u;j(2,arguments);var d=Ut(),p=D(null!==(r=null!==(o=null!==(i=null!==(a=null==n?void 0:n.weekStartsOn)&&void 0!==a?a:null==n||null===(l=n.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==i?i:d.weekStartsOn)&&void 0!==o?o:null===(s=d.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==r?r:0);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=S(t),h=D(e),A=((h%7+7)%7<p?7:0)+h-f.getUTCDay();return f.setUTCDate(f.getUTCDate()+A),f}var Kt=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",90),Z(O(t),"incompatibleTokens",["D","i","e","c","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"E":case"EE":case"EEE":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=6}},{key:"set",value:function(t,e,n,r){return(t=Vt(t,n,r)).setUTCHours(0,0,0,0),t}}]),n}(_),te=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",90),Z(O(t),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n,r){var o=function(t){var e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"e":case"ee":return Ct(Bt(e.length,t),o);case"eo":return Ct(n.ordinalNumber(t,{unit:"day"}),o);case"eee":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"eeeee":return n.day(t,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=6}},{key:"set",value:function(t,e,n,r){return(t=Vt(t,n,r)).setUTCHours(0,0,0,0),t}}]),n}(_),ee=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",90),Z(O(t),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n,r){var o=function(t){var e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"c":case"cc":return Ct(Bt(e.length,t),o);case"co":return Ct(n.ordinalNumber(t,{unit:"day"}),o);case"ccc":return n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});case"ccccc":return n.day(t,{width:"narrow",context:"standalone"});case"cccccc":return n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});default:return n.day(t,{width:"wide",context:"standalone"})||n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=6}},{key:"set",value:function(t,e,n,r){return(t=Vt(t,n,r)).setUTCHours(0,0,0,0),t}}]),n}(_),ne=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",90),Z(O(t),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){var r=function(t){return 0===t?7:t};switch(e){case"i":case"ii":return Bt(e.length,t);case"io":return n.ordinalNumber(t,{unit:"day"});case"iii":return Ct(n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiii":return Ct(n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiiii":return Ct(n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);default:return Ct(n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r)}}},{key:"validate",value:function(t,e){return e>=1&&e<=7}},{key:"set",value:function(t,e,n){return t=function(t,e){j(2,arguments);var n=D(e);n%7==0&&(n-=7);var r=S(t),o=((n%7+7)%7<1?7:0)+n-r.getUTCDay();return r.setUTCDate(r.getUTCDate()+o),r}(t,n),t.setUTCHours(0,0,0,0),t}}]),n}(_),re=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",80),Z(O(t),"incompatibleTokens",["b","B","H","k","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"a":case"aa":case"aaa":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(t,e,n){return t.setUTCHours(jt(n),0,0,0),t}}]),n}(_),oe=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",80),Z(O(t),"incompatibleTokens",["a","B","H","k","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"b":case"bb":case"bbb":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(t,e,n){return t.setUTCHours(jt(n),0,0,0),t}}]),n}(_),ie=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",80),Z(O(t),"incompatibleTokens",["a","b","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"B":case"BB":case"BBB":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(t,e,n){return t.setUTCHours(jt(n),0,0,0),t}}]),n}(_),ae=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",70),Z(O(t),"incompatibleTokens",["H","K","k","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"h":return xt(at,t);case"ho":return n.ordinalNumber(t,{unit:"hour"});default:return Bt(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=12}},{key:"set",value:function(t,e,n){var r=t.getUTCHours()>=12;return r&&n<12?t.setUTCHours(n+12,0,0,0):r||12!==n?t.setUTCHours(n,0,0,0):t.setUTCHours(0,0,0,0),t}}]),n}(_),le=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",70),Z(O(t),"incompatibleTokens",["a","b","h","K","k","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"H":return xt(rt,t);case"Ho":return n.ordinalNumber(t,{unit:"hour"});default:return Bt(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=23}},{key:"set",value:function(t,e,n){return t.setUTCHours(n,0,0,0),t}}]),n}(_),ce=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",70),Z(O(t),"incompatibleTokens",["h","H","k","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"K":return xt(it,t);case"Ko":return n.ordinalNumber(t,{unit:"hour"});default:return Bt(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=11}},{key:"set",value:function(t,e,n){return t.getUTCHours()>=12&&n<12?t.setUTCHours(n+12,0,0,0):t.setUTCHours(n,0,0,0),t}}]),n}(_),se=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",70),Z(O(t),"incompatibleTokens",["a","b","h","H","K","t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"k":return xt(ot,t);case"ko":return n.ordinalNumber(t,{unit:"hour"});default:return Bt(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=24}},{key:"set",value:function(t,e,n){var r=n<=24?n%24:n;return t.setUTCHours(r,0,0,0),t}}]),n}(_),ue=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",60),Z(O(t),"incompatibleTokens",["t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"m":return xt(lt,t);case"mo":return n.ordinalNumber(t,{unit:"minute"});default:return Bt(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=59}},{key:"set",value:function(t,e,n){return t.setUTCMinutes(n,0,0),t}}]),n}(_),de=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",50),Z(O(t),"incompatibleTokens",["t","T"]),t}return X(n,[{key:"parse",value:function(t,e,n){switch(e){case"s":return xt(ct,t);case"so":return n.ordinalNumber(t,{unit:"second"});default:return Bt(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=59}},{key:"set",value:function(t,e,n){return t.setUTCSeconds(n,0),t}}]),n}(_),pe=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",30),Z(O(t),"incompatibleTokens",["t","T"]),t}return X(n,[{key:"parse",value:function(t,e){return Ct(Bt(e.length,t),(function(t){return Math.floor(t*Math.pow(10,3-e.length))}))}},{key:"set",value:function(t,e,n){return t.setUTCMilliseconds(n),t}}]),n}(_),fe=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",10),Z(O(t),"incompatibleTokens",["t","T","x"]),t}return X(n,[{key:"parse",value:function(t,e){switch(e){case"X":return kt(yt,t);case"XX":return kt(gt,t);case"XXXX":return kt(wt,t);case"XXXXX":return kt(Et,t);default:return kt(bt,t)}}},{key:"set",value:function(t,e,n){return e.timestampIsSet?t:new Date(t.getTime()-n)}}]),n}(_),he=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",10),Z(O(t),"incompatibleTokens",["t","T","X"]),t}return X(n,[{key:"parse",value:function(t,e){switch(e){case"x":return kt(yt,t);case"xx":return kt(gt,t);case"xxxx":return kt(wt,t);case"xxxxx":return kt(Et,t);default:return kt(bt,t)}}},{key:"set",value:function(t,e,n){return e.timestampIsSet?t:new Date(t.getTime()-n)}}]),n}(_),Ae=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",40),Z(O(t),"incompatibleTokens","*"),t}return X(n,[{key:"parse",value:function(t){return Tt(t)}},{key:"set",value:function(t,e,n){return[new Date(1e3*n),{timestampIsSet:!0}]}}]),n}(_),me=function(t){q(n,t);var e=H(n);function n(){var t;z(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return Z(O(t=e.call.apply(e,[this].concat(o))),"priority",20),Z(O(t),"incompatibleTokens","*"),t}return X(n,[{key:"parse",value:function(t){return Tt(t)}},{key:"set",value:function(t,e,n){return[new Date(n),{timestampIsSet:!0}]}}]),n}(_),ve={G:new V,y:new Lt,Y:new It,R:new Wt,u:new qt,Q:new Rt,q:new Ht,M:new zt,L:new Ft,w:new Qt,I:new Zt,d:new $t,D:new _t,E:new Kt,e:new te,c:new ee,i:new ne,a:new re,b:new oe,B:new ie,h:new ae,H:new le,K:new ce,k:new se,m:new ue,s:new de,S:new pe,X:new fe,x:new he,t:new Ae,T:new me},ye=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ge=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,we=/^'([^]*?)'?$/,be=/''/g,Ee=/\S/,Ce=/[a-zA-Z]/;function xe(t,e,n,r){var o,i,a,l,c,s,u,d,p,f,h,m,y,g,w,b,E,C;j(3,arguments);var x=String(t),k=String(e),T=Ut(),L=null!==(o=null!==(i=null==r?void 0:r.locale)&&void 0!==i?i:T.locale)&&void 0!==o?o:B;if(!L.match)throw new RangeError("locale must contain match property");var Y=D(null!==(a=null!==(l=null!==(c=null!==(s=null==r?void 0:r.firstWeekContainsDate)&&void 0!==s?s:null==r||null===(u=r.locale)||void 0===u||null===(d=u.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==c?c:T.firstWeekContainsDate)&&void 0!==l?l:null===(p=T.locale)||void 0===p||null===(f=p.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==a?a:1);if(!(Y>=1&&Y<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var O=D(null!==(h=null!==(m=null!==(y=null!==(g=null==r?void 0:r.weekStartsOn)&&void 0!==g?g:null==r||null===(w=r.locale)||void 0===w||null===(b=w.options)||void 0===b?void 0:b.weekStartsOn)&&void 0!==y?y:T.weekStartsOn)&&void 0!==m?m:null===(E=T.locale)||void 0===E||null===(C=E.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==h?h:0);if(!(O>=0&&O<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(""===k)return""===x?S(n):new Date(NaN);var W,q={firstWeekContainsDate:Y,weekStartsOn:O,locale:L},R=[new $],H=k.match(ge).map((function(t){var e=t[0];return e in U?(0,U[e])(t,L.formatLong):t})).join("").match(ye),z=[],F=v(H);try{var Q=function(){var e=W.value;null!=r&&r.useAdditionalWeekYearTokens||!function(t){return-1!==N.indexOf(t)}(e)||I(e,k,t),null!=r&&r.useAdditionalDayOfYearTokens||!function(t){return-1!==P.indexOf(t)}(e)||I(e,k,t);var n=e[0],o=ve[n];if(o){var i=o.incompatibleTokens;if(Array.isArray(i)){var a=z.find((function(t){return i.includes(t.token)||t.token===n}));if(a)throw new RangeError("The format string mustn't contain `".concat(a.fullToken,"` and `").concat(e,"` at the same time"))}else if("*"===o.incompatibleTokens&&z.length>0)throw new RangeError("The format string mustn't contain `".concat(e,"` and any other token at the same time"));z.push({token:n,fullToken:e});var l=o.run(x,e,L.match,q);if(!l)return{v:new Date(NaN)};R.push(l.setter),x=l.rest}else{if(n.match(Ce))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");if("''"===e?e="'":"'"===n&&(e=e.match(we)[1].replace(be,"'")),0!==x.indexOf(e))return{v:new Date(NaN)};x=x.slice(e.length)}};for(F.s();!(W=F.n()).done;){var X=Q();if("object"===A(X))return X.v}}catch(t){F.e(t)}finally{F.f()}if(x.length>0&&Ee.test(x))return new Date(NaN);var Z=R.map((function(t){return t.priority})).sort((function(t,e){return e-t})).filter((function(t,e,n){return n.indexOf(t)===e})).map((function(t){return R.filter((function(e){return e.priority===t})).sort((function(t,e){return e.subPriority-t.subPriority}))})).map((function(t){return t[0]})),J=S(n);if(isNaN(J.getTime()))return new Date(NaN);var G,_=function(t,e){return j(2,arguments),function(t,e){j(2,arguments);var n=S(t).getTime(),r=D(e);return new Date(n+r)}(t,-D(e))}(J,function(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}(J)),V={},K=v(Z);try{for(K.s();!(G=K.n()).done;){var tt=G.value;if(!tt.validate(_,q))return new Date(NaN);var et=tt.set(_,V,q);Array.isArray(et)?(_=et[0],M(V,et[1])):_=et}}catch(t){K.e(t)}finally{K.f()}return _}const ke=document.querySelector("#content"),Te=document.createElement("div");Te.classList.add("project-page-container");const Be=document.createElement("h1");Be.classList.add("project-header");const De=function(t,e=null){Te.innerHTML="",Be.innerText=`Project: ${t}`;const n=document.querySelector(".lists-container");n.innerHTML="";const r=document.createElement("div");r.classList.add("project-list-button"),r.innerText="+";const o=document.createElement("div");o.classList.add("header-button-container"),o.appendChild(Be),o.appendChild(r),Te.appendChild(o),Te.appendChild(n),ke.appendChild(Te);const i=document.createElement("div");i.classList.add("project-todo-form-container"),i.style.display="none",i.innerHTML='\n<form action="">\n  <p class="form-header">Create Project Todo Item</p>\n  \n<div class="label-input-container">\n<label for="projectTitle">Title:</label>\n<input type="text" placeholder="Walk the dog" id="projectTitle" name="projectTitle">\n</div>\n\n<div class="label-input-container">\n<label for="projectDescription">Description:</label>\n<input type="text" placeholder="Description here" id="projectDescription" name="projectDescription">\n</div>\n\n<div class="label-input-container">\n<label for="projectDueDate">Due Date:</label>\n<input type="text" placeholder="DD/MM/YYYY" id="projectDueDate" name="projectDueDate">\n</div>\n\n<div class="label-input-container">\n<label for="projectPriority">Priority:</label>\n<select id="projectPriority" name="projectPriority">\n  <option value="Low">Low</option>\n  <option value="Medium">Medium</option>\n  <option value="High">High</option>\n</select>\n</div>\n\n\n\n<div class="form-button-container">\n\n<img src="src/tick-mark.png" class="add-project-list-button" alt="Tick"/>\n<img src="src/close.png" class="close-project-list-button" alt="Close"/>\n</div>\n\n\n</form>\n',ke.appendChild(i),r.addEventListener("click",(t=>{t.preventDefault(),i.style.display="flex"})),document.querySelector(".add-project-list-button").addEventListener("click",(function(e){e.preventDefault();const n=xe(projectDueDate.value,"dd/MM/yyyy",new Date),r=new Me(projectTitle.value,projectDescription.value,n,projectPriority.value,"",t);r.renderTodoList(),Se.push(r),i.style.display="none",document.querySelector("form").reset(),console.log(Se),localStorage.setItem("myTodoList",JSON.stringify(Se)),console.log(localStorage.getItem("myTodoList"))})),e||(e=JSON.parse(localStorage.getItem("myTodoList")).filter((e=>e.projectName===t))),document.querySelector(".close-project-list-button").addEventListener("click",(()=>{i.style.display="none",document.getElementById("projectTitle").value="",document.getElementById("projectDescription").value="",document.getElementById("projectDueDate").value="",document.getElementById("projectPriority").value="Low"})),e.forEach((t=>{new Me(t.title,t.description,t.dueDate,t.priority,t.notes,t.project).renderTodoList()}))},je=document.createElement("div");je.classList.add("lists-container");const Se=[];class Me{constructor(t,e,n,r,o,i){this.title=t,this.description=e,this.dueDate=n instanceof Date?n:new Date(n),this.priority=r,this.notes=o,this.projectName=i}renderTodoList(){const t=document.createElement("div");t.classList.add("list-container");const e=document.createElement("p");e.classList.add("list-title"),e.innerText=`${this.title}`;const n=document.createElement("p");n.classList.add("list-description"),n.innerText=`${this.description}`,n.style.display="none";const r=document.createElement("p");r.classList.add("list-due-date"),r.innerText=`${this.dueDate.toLocaleDateString()}`;const o=document.createElement("p");o.classList.add("list-priority",this.priority.toLowerCase()),o.innerText=`${this.priority}`;const i=()=>{e.innerText=this.title,n.innerText=this.description,r.innerText=`Due Date: ${this.dueDate.toLocaleDateString()}`,o.innerText=this.priority};t.appendChild(e),t.appendChild(n),t.appendChild(r),t.appendChild(o),je.appendChild(t),content.appendChild(je),t.addEventListener("click",(()=>{this.openTodoList(i)}))}openTodoList(t){const e=document.createElement("div");e.classList.add("open-list-container");const n=document.createElement("p");n.classList.add("open-list-title"),n.innerText=`${this.title}`;const r=document.createElement("p");r.classList.add("open-list-description"),r.innerText=`${this.description}`;const o=document.createElement("p");o.classList.add("open-list-due-date"),o.innerText=`${this.dueDate.toLocaleDateString()}`;const i=document.createElement("p");i.classList.add("list-priority",this.priority.toLowerCase()),i.id="open-list-priority",i.innerText=`${this.priority}`;const a=document.createElement("div");a.className="buttons-container";const l=document.createElement("div");l.className="delete-list-button",l.innerHTML='<img src="src/delete.png" alt="Delete">';const c=document.createElement("div");c.className="close-list-button",c.innerHTML='<img src="src/tick-mark.png" alt="Tick">';const s=document.createElement("div");s.className="edit-list-button",s.innerHTML='<img src="src/edit-file.png" alt="Edit">';const u=document.createElement("form");u.classList.add("edit-form");const d=document.createElement("h2");d.innerText="Edit Your Items";const p=document.createElement("input");p.type="text",p.value=this.title;const f=document.createElement("input");f.type="text",f.value=this.description;const h=document.createElement("input");h.type="text",h.value=this.dueDate.toDateString();const A=document.createElement("select");A.id="edit-priority",["Low","Medium","High"].forEach((t=>{const e=document.createElement("option");e.value=t,e.text=t,A.add(e)})),A.value=this.priority;const m=document.createElement("img");m.className="change-edit-button",m.src="src/tick-mark.png",m.alt="Tick",u.appendChild(d),u.appendChild(p),u.appendChild(f),u.appendChild(h),u.appendChild(A),u.appendChild(m),e.appendChild(u),u.style.display="none",s.addEventListener("click",(()=>{u.style.display="flex"})),m.addEventListener("click",(e=>{try{e.preventDefault();const a=this.title;this.title=p.value,this.description=f.value,this.dueDate=new Date(h.value),this.priority=A.value,u.style.display="none",n.innerText=this.title,r.innerText=this.description,o.innerText=`Due Date: ${this.dueDate.toLocaleDateString()}`,i.innerText=A.value;const l=Se.findIndex((t=>t.title===a));-1!==l?(Se[l]=this,localStorage.setItem("myTodoList",JSON.stringify(Se)),console.log("Updated in localStorage:",Se)):console.error("Todo not found in todosArr"),t()}catch(t){console.error("Error in editChangeButton click event:",t)}})),u.style.display="none",c.addEventListener("click",(()=>{e.style.display="none"})),e.appendChild(n),e.appendChild(r),e.appendChild(o),e.appendChild(i),a.appendChild(c),a.appendChild(s),a.appendChild(l),e.appendChild(a),content.appendChild(e),l.addEventListener("click",(()=>{this.deleteTodoList()}))}deleteTodoList(){const t=document.querySelectorAll(".open-list-container"),e=document.querySelectorAll(".list-container");if(!0===confirm("DELETE TODO: Are you sure?")){t.forEach((t=>{t.remove()})),e.forEach((t=>{t.remove()}));const n=Se.findIndex((t=>t.title===this.title));-1!==n&&(Se.splice(n,1),localStorage.setItem("myTodoList",JSON.stringify(Se)),location.reload())}}}const Le=document.querySelector("#content"),Ye=document.createElement("div"),Ue=document.createElement("div");Ue.classList.add("form-container");const Pe=document.createElement("div");Pe.classList.add("project-form-container"),window.addEventListener("load",(()=>{const t=JSON.parse(localStorage.getItem("myTodoList"));t&&(Se.push(...t),t.forEach((t=>{new Me(t.title,t.description,t.dueDate,t.priority,t.notes,t.project).renderTodoList()})))})),window.addEventListener("load",(()=>{const t=JSON.parse(localStorage.getItem("myProjects"));t&&(Oe.push(...t),t.forEach((t=>{new We(t.name).renderProject()})),Oe.forEach((t=>{const e=document.getElementById(t.name);e.addEventListener("click",(()=>De(e.id)))})))})),Ye.innerHTML='\n\n\n<h1 class="top-menu-title">LIFE\'S TODOS</h1>\n<p class="menu-title" id="menu-home">Home</p>\n<div class="title-button-container">\n<p class="menu-title">My Projects</p>\n<button class="new-project-button">+</button>\n</div>\n<button class="new-list-button">+</button>\n\n\n',Ye.classList.add("menu-container");const Ne=document.createElement("div");Ne.classList.add("project-names-container"),Le.appendChild(Ye),Le.appendChild(Ne),Le.appendChild(je);const Ie=document.querySelector(".new-list-button");Ie.classList.add("new-list-button"),Ie.addEventListener("click",(t=>{t.preventDefault(),Ue.style.display="flex"})),Ue.innerHTML='\n<form action="">\n  <p class="form-header">Create Todo Item</p>\n  \n<div class="label-input-container">\n<label for="title">Title:</label>\n<input type="text" placeholder="Walk the dog" id="title" name="title">\n</div>\n\n<div class="label-input-container">\n<label for="description">Description:</label>\n<input type="text" placeholder="Description here" id="description" name="description">\n</div>\n\n<div class="label-input-container">\n<label for="dueDate">Due Date:</label>\n<input type="text" placeholder="DD/MM/YYYY" id="dueDate" name="dueDate">\n</div>\n\n<div class="label-input-container">\n<label for="priority">Priority:</label>\n<select id="priority" name="priority">\n  <option value="Low">Low</option>\n  <option value="Medium">Medium</option>\n  <option value="High">High</option>\n</select>\n</div>\n\n<div class="form-button-container">\n<img src="src/tick-mark.png" class="add-list-button" alt="Tick"/>\n<img src="src/close.png" class="close-list-button" alt="Close"/>\n\n</div>\n\n</form>\n',Le.appendChild(Ue),Ue.style.display="none",document.querySelector(".add-list-button").addEventListener("click",(function(t){t.preventDefault();const e=xe(dueDate.value,"dd/MM/yyyy",new Date),n=new Me(title.value,description.value,e,priority.value,"");n.renderTodoList(),Se.push(n),Ue.style.display="none",document.querySelector("form").reset(),localStorage.setItem("myTodoList",JSON.stringify(Se)),console.log(localStorage.getItem("myTodoList"))})),document.querySelector(".close-list-button").addEventListener("click",(()=>{Ue.style.display="none",document.getElementById("title").value="",document.getElementById("description").value="",document.getElementById("dueDate").value="",document.getElementById("priority").value="Low"}));const Oe=[];class We{constructor(t){this.name=t,this.id=t}renderProject(){const t=document.createElement("p");t.classList.add("project-name"),t.innerText=this.name,t.id=this.name;const e=document.querySelector(".project-names-container");e.appendChild(t),Ye.insertBefore(e,Ie)}}const qe=document.querySelector(".new-project-button");qe.classList.add("new-project-button"),qe.addEventListener("click",(t=>{t.preventDefault(),Pe.style.display="flex"})),Pe.innerHTML='\n<form action="">\n<p class="form-header">Create New Project</p>\n<div>\n<label for="name">Name:</label>\n<input type="text" placeholder="Get a Job" id="name" name="name">\n</div>\n\n<div class="form-button-container">\n\n<img src="src/tick-mark.png" class="add-project-button" alt="Tick"/>\n<img src="src/close.png" class="close-project-button" alt="Close"/>\n</div>\n</form>\n',Le.appendChild(Pe),Pe.style.display="none",document.querySelector(".add-project-button").addEventListener("click",(function(t){t.preventDefault();const e=document.querySelector("#name"),n=new We(e.value);n.renderProject(),Oe.push(n),Pe.style.display="none";const r=document.getElementById(n.name);r.addEventListener("click",(()=>De(r.id))),localStorage.setItem("myProjects",JSON.stringify(Oe)),console.log(localStorage.getItem("myProjects"))})),document.querySelector(".close-project-button").addEventListener("click",(()=>{Pe.style.display="none",document.getElementById("name").value=""})),document.getElementById("menu-home").addEventListener("click",(()=>{location.reload()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,